// Copyright 2021 Isaac Diamond
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package monotonic_counter;

import "g_counter.proto";

option go_package = "github.com/isaacd9/proto-crdt/examples/monotonic_counter/pb";

// Monotonic counter service. Each service counts independently each second and
// then merges the results of thier counts.
service Counter {
	// Merges counts from another node
	rpc Peer (stream MergeRequest) returns (stream MergeResponse) {}
	// Returns the current value
	rpc Value (ValueRequest) returns (ValueResponse) {}
}

// The request message containing the newly ticked value.
message MergeRequest {
	pb_crdt.v1.GCounter counter = 1;
	// Next: 2
}

// The response message containing the new agreed value.
message MergeResponse {
	pb_crdt.v1.GCounter counter = 1;
	// Next: 2
}

// Request for the current value
message ValueRequest {}

// Returns the current value
message ValueResponse {
	uint64 value = 1;

	// Next: 2
}